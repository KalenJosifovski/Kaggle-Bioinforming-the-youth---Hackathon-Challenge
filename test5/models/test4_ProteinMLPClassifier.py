#!/usr/bin/env python3# -*- coding: utf-8 -*-"""Created on Tue Jan 14 12:55:02 2025@author: KalenJosifovski""""""Model definitions package."""import torchimport torch.nn as nnclass ProteinMLPClassifier(nn.Module):    def __init__(self, input_dim=26, hidden_dim=128, dropout=0.5):        super(ProteinMLPClassifier, self).__init__()        global sequence_length        self.input_dim = input_dim        self.sequence_length = sequence_length        self.flatten_dim = self.input_dim * self.sequence_length  # Dynamically compute input size        # Fully connected layers with dropout        self.fc1 = nn.Sequential(            nn.Linear(self.flatten_dim, hidden_dim),            nn.ReLU(),            nn.Dropout(p=dropout)        )        self.fc2 = nn.Sequential(            nn.Linear(hidden_dim, hidden_dim // 2),            nn.ReLU(),            nn.Dropout(p=dropout)        )        self.fc3 = nn.Linear(hidden_dim // 2, 1)  # Binary classification    def forward(self, x):        x = x.view(x.size(0), -1)  # Flatten the input        x = self.fc1(x)        x = self.fc2(x)        x = torch.sigmoid(self.fc3(x))  # Binary output        return x    