#!/usr/bin/env python3# -*- coding: utf-8 -*-"""Created on Tue Jan 14 12:55:02 2025@author: KalenJosifovski""""""Model definitions package."""import torchimport torch.nn as nnimport torch.nn.functional as Fclass ProteinBiLSTMClassifier(nn.Module):    def __init__(self, input_dim=26, hidden_dim=64, num_layers=2):        super(ProteinBiLSTMClassifier, self).__init__()        self.hidden_dim = hidden_dim        self.num_layers = num_layers        # Bidirectional LSTM        self.lstm = nn.LSTM(input_size=input_dim, hidden_size=hidden_dim,                            num_layers=num_layers, batch_first=True, bidirectional=True)        # Fully connected layers        self.fc1 = nn.Linear(hidden_dim * 2, 128)  # Bidirectional doubles hidden_dim        self.fc2 = nn.Linear(128, 1)  # Binary classification    def forward(self, x):        # LSTM expects input shape: (batch_size, seq_len, input_dim)        x, _ = self.lstm(x)  # Output shape: (batch_size, seq_len, hidden_dim * 2)        # Take the output from the last time step        x = x[:, -1, :]  # Shape: (batch_size, hidden_dim * 2)        # Fully connected layers        x = F.relu(self.fc1(x))        x = torch.sigmoid(self.fc2(x))  # Binary classification        return x